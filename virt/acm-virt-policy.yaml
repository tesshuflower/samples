apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: acm-virt-backup
  annotations:
    policy.open-cluster-management.io/categories: CA Security Assessment and Authorization
    policy.open-cluster-management.io/controls: CA-2 Security Assessments, CA-7 Continuous Monitoring
    policy.open-cluster-management.io/standards: NIST SP 800-53
spec:
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: check-dpa-config
        spec:
          object-templates-raw: |
            {{- $acm_virt_sch_name := "acm-rho-virt-schedule" }}
            {{- $schedule_label := "cluster.open-cluster-management.io/backup-schedule-type, cluster.open-cluster-management.io/backup-schedule-type in (kubevirt)"}}

            {{- /* check if VM CRD is not installed  */ -}}
            {{- $vm_crd_name := "virtualmachines.kubevirt.io" }}
            {{- $vm_crd := lookup "apiextensions.k8s.io/v1" "CustomResourceDefinition" "" $vm_crd_name }}
            {{- $vm_crd_exists := eq $vm_crd.metadata.name  $vm_crd_name }}

            {{- /* skip if VM CRD is not installed  */ -}}
            {{ if $vm_crd_exists }}

              {{- /* check if there are VM instances  */ -}}
              {{- $vms := (lookup "kubevirt.io/v1" "VirtualMachine" "" "" "{{hub fromConfigMap "" (printf "%s" (index .ManagedClusterLabels "acm-virt-config")) "backup_label_name" hub}}").items }}
              {{ if gt (len ($vms)) 0  }}

                {{- /* check if OADP CRD is installed  */ -}}
                {{- $dpa_crd_name := "dataprotectionapplications.oadp.openshift.io" }}
                {{- $dpa_crd := lookup "apiextensions.k8s.io/v1" "CustomResourceDefinition" "" $dpa_crd_name  }}
                {{- $dpa_crd_exists := eq $dpa_crd.metadata.name  $dpa_crd_name }}

                {{ if $dpa_crd_exists }}

                  {{- /* ns is the namespace for the OADP deployment  */ -}}
                  {{- $ns := "open-cluster-management-backup" }}

                  {{- /* check if this is a hub, acm installed  */ -}}
                  {{- $acm_crd_name := "multiclusterhubs.operator.open-cluster-management.io" }}
                  {{- $acm_crd := lookup "apiextensions.k8s.io/v1" "CustomResourceDefinition" "" $acm_crd_name  }}
                  {{- $is_hub := eq $acm_crd.metadata.name  $acm_crd_name }}

                  {{hub $configMap := (lookup "v1" "ConfigMap" "" (printf "%s" (index .ManagedClusterLabels "acm-virt-config"))) hub}}
                  {{- $dpa_name := "" }}
                  {{ if not $is_hub }}
                    {{- $ns = "{{hub $configMap.data.backupNS hub}}" }}
                    {{- $dpa_name = "{{hub $configMap.data.dpa_name hub}}" }}
                  {{ else }}
                    {{- $is_hub := eq $acm_crd.metadata.name  $acm_crd_name }}
                    {{- /* get DPA name  */ -}}
                    {{- $acm_crd_name := "multiclusterhubs.operator.open-cluster-management.io" }}
                    {{- range $dpa_objs := (lookup "oadp.openshift.io/v1alpha1" "DataProtectionApplication" "" $acm_crd_name).items  }}
                      {{- $dpa_name = $dpa_objs.metadata.name }}
                    {{- end}}
                  {{- end }}

                - complianceType: musthave
                  objectDefinition:
                    apiVersion: oadp.openshift.io/v1alpha1
                    kind: DataProtectionApplication
                    metadata:
                      namespace: {{ $ns }}
                      name: {{ $dpa_name }}
                    spec:
                      configuration:
                        velero:
                          defaultPlugins:
                            - csi
                            - openshift
                            - kubevirt
                        nodeAgent:
                          enable: true
                          uploaderType: kopia
                    {{- end}}
                  {{- end }}
                {{- end }}
          remediationAction: inform
          severity: high

    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: install-oadp
        spec:
          object-templates-raw: |
            {{- /* ns is the namespace for the OADP deployment  */ -}}
            {{- $ns := "open-cluster-management-backup" }}

            {{- $acm_virt_sch_name := "acm-rho-virt-schedule" }}
            {{- $schedule_label := "cluster.open-cluster-management.io/backup-schedule-type, cluster.open-cluster-management.io/backup-schedule-type in (kubevirt)"}}

            {{- /* check if VM CRD is not installed  */ -}}
            {{- $vm_crd_name := "virtualmachines.kubevirt.io" }}
            {{- $vm_crd := lookup "apiextensions.k8s.io/v1" "CustomResourceDefinition" "" $vm_crd_name }}
            {{- $vm_crd_exists := eq $vm_crd.metadata.name  $vm_crd_name }}

            {{- /* check if this is a hub, acm installed  */ -}}
            {{- $acm_crd_name := "multiclusterhubs.operator.open-cluster-management.io" }}
            {{- $acm_crd := lookup "apiextensions.k8s.io/v1" "CustomResourceDefinition" "" $acm_crd_name  }}
            {{- $is_hub := eq $acm_crd.metadata.name  $acm_crd_name }}

            {{- /* run this ifVM CRD is installed and this is a managed cluster, NOT hub */ -}}
            {{ if and $vm_crd_exists (not $is_hub) }}

              {{- /* check if there are VM instances  */ -}}
              {{ if gt (len ((lookup "kubevirt.io/v1" "VirtualMachine" "" "" "{{hub fromConfigMap "" (printf "%s" (index .ManagedClusterLabels "acm-virt-config")) "backup_label_name" hub}}").items)) 0  }}

                  {{- $oadp_channel := "stable-1.4" }}
                  {{- $oadp_install_plan_approval := "Automatic" }}
                  {{- $oadp_subs_name := "redhat-oadp-operator" }}
                  {{- $oadp_operator_source := "redhat-operators" }}
                  {{- $oadp_source_ns := "openshift-marketplace" }}

                  {{- $oadp_channel = "{{hub fromConfigMap "" (printf "%s" (index .ManagedClusterLabels "acm-virt-config")) "channel" hub}}" }}
                  {{- $ns = "{{hub fromConfigMap "" (printf "%s" (index .ManagedClusterLabels "acm-virt-config")) "backupNS" hub}}" }}
                  {{- $credentialsName := "{{hub fromConfigMap "" (printf "%s" (index .ManagedClusterLabels "acm-virt-config")) "credentials_name" hub}}" }}

                - complianceType: musthave
                  objectDefinition:
                    apiVersion: v1
                    kind: Namespace
                    metadata:
                      name: {{ $ns }}

                - complianceType: musthave
                  objectDefinition:
                    apiVersion: v1
                    kind: Secret
                    metadata:
                      name: {{ $credentialsName }}
                      namespace: {{ $ns }}
                    data: '{{hub copySecretData "" (fromConfigMap "" (printf "%s" (index .ManagedClusterLabels "acm-virt-config")) "credentials_hub_secret_name") hub}}'

                - complianceType: musthave
                  objectDefinition:
                    apiVersion: operators.coreos.com/v1
                    kind: OperatorGroup
                    metadata:
                      name: redhat-oadp-operator-group
                      namespace: {{ $ns }}
                    spec:
                      targetNamespaces:
                      - {{ $ns }}

                - complianceType: musthave
                  objectDefinition:
                    apiVersion: operators.coreos.com/v1alpha1
                    kind: Subscription
                    metadata:
                      name: redhat-oadp-operator-subscription
                      namespace: {{ $ns }}
                    spec:
                      channel: {{ $oadp_channel }}
                      installPlanApproval: {{ $oadp_install_plan_approval }}
                      name: {{ $oadp_subs_name }}
                      source: {{ $oadp_operator_source }}
                      sourceNamespace: {{ $oadp_source_ns }}

                - complianceType: mustonlyhave
                  objectDefinition:
                    apiVersion: oadp.openshift.io/v1alpha1
                    kind: DataProtectionApplication
                    metadata:
                      name: {{hub fromConfigMap "" (printf "%s" (index .ManagedClusterLabels "acm-virt-config")) "dpa_name" hub}}
                      namespace: {{ $ns }}
                    spec: '{{hub (fromConfigMap "" (printf "%s" (index .ManagedClusterLabels "acm-virt-config")) "dpa_spec") | toLiteral hub}}'

              {{- end }}
            {{- end }}
          remediationAction: enforce
          pruneObjectBehavior: DeleteIfCreated
          severity: high 

    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: check-backup-status-completed
        spec:
          object-templates-raw: |
            {{- /* ns is the namespace for the OADP deployment  */ -}}
            {{- $ns := "open-cluster-management-backup" }}
            {{- $acm_virt_sch_name := "acm-rho-virt-schedule" }} 
            {{- $schedule_label := "cluster.open-cluster-management.io/backup-schedule-type, cluster.open-cluster-management.io/backup-schedule-type in (kubevirt)"}}

            {{- $sch_crd_name := "schedules.velero.io" }}
            {{- $sch_crd := lookup "apiextensions.k8s.io/v1" "CustomResourceDefinition" "" $sch_crd_name  }}
            {{- $sch_crd_exists := eq $sch_crd.metadata.name  $sch_crd_name }}

            {{ if $sch_crd_exists }}

              {{- $scheduleObj := (lookup "velero.io/v1" "Schedule" $ns $acm_virt_sch_name ) }}

              {{- /* if acm-rho-virt-schedule exists, get the last generated backup and verify the status is Completed  */ -}}
              {{- if eq $scheduleObj.metadata.name $acm_virt_sch_name }}

                {{- $scheduleObjLastBckTime := "" }}
                {{ if $scheduleObj.status }}
                  {{- $scheduleObjLastBckTime = (index $scheduleObj.status "lastBackup") }}
                {{- end }}

                {{ if (eq $scheduleObjLastBckTime "") }}

              - complianceType: musthave
                objectDefinition:
                  apiVersion: velero.io/v1
                  kind: Schedule
                  metadata:
                    namespace: {{ $ns }}
                    name: {{ $acm_virt_sch_name }}
                    labels:
                      cluster.open-cluster-management.io/backup-schedule-type: kubevirt 
                  status:
                    phase: Enabled
                    lastBackup: "some value"

                {{ else }}
                  {{- range $backupList := (lookup "velero.io/v1" "Backup" $ns "" $schedule_label).items }}
                    {{- $backupCreation := $backupList.metadata.creationTimestamp  }}
                    {{ if eq $backupCreation $scheduleObjLastBckTime }}

                      {{- $data_upload_label := "velero.io/backup-name, velero.io/backup-name in (aa)" }}
                      {{- $data_upload_label = replace "aa" $backupList.metadata.name $data_upload_label }}

                      {{- range $dataupload_obj :=  (lookup "velero.io/v2alpha1" "DataUpload" $ns "" $data_upload_label ).items }}
              - complianceType: musthave
                objectDefinition:
                  apiVersion: velero.io/v2alpha1
                  kind: DataUpload
                  metadata:
                    namespace: {{ $ns }}
                    name: {{ $dataupload_obj.metadata.name }}
                    labels:
                      velero.io/backup-name: {{ $backupList.metadata.name }}
                  status:
                    phase: Completed
                       {{- end }}

              - complianceType: musthave
                objectDefinition:
                  apiVersion: velero.io/v1
                  kind: Backup
                  metadata:
                    namespace: {{ $ns }}
                    name: {{ $backupList.metadata.name }}
                    labels:
                      cluster.open-cluster-management.io/backup-cluster: {{ fromClusterClaim "id.openshift.io" }}
                      cluster.open-cluster-management.io/backup-schedule-type: kubevirt
                      velero.io/schedule-name: {{ $scheduleObj.metadata.name }}
                  status:
                    phase: Completed
                    {{- end }}
                  {{- end }}
                {{- end }}
              {{- end }}
            {{- end }}

          remediationAction: inform
          severity: low
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: create-virt-backup
        spec:
          object-templates-raw: |
            {{- /* ns is the namespace for the OADP deployment  */ -}}
            {{- $ns := "open-cluster-management-backup" }}
            {{- $acm_virt_sch_name := "acm-rho-virt-schedule" }}
            {{- $acm_virt_sch_name_daily := "acm-rho-virt-schedule-daily" }}

            {{- /* check if VM CRD is not installed  */ -}}
            {{- $vm_crd_name := "virtualmachines.kubevirt.io" }}
            {{- $vm_crd := lookup "apiextensions.k8s.io/v1" "CustomResourceDefinition" "" $vm_crd_name }}
            {{- $vm_crd_exists := eq $vm_crd.metadata.name  $vm_crd_name }}

            {{- /* true if there are any VM instances  */ -}}
            {{- $vms_inst_exists := false  }}
            {{- $vms := "" }}
            {{- $vms_daily := "" }}

            {{- /* if vm CRD is installed check if there are VM instances  */ -}}
            {{ if $vm_crd_exists }}
              {{- $vms = (lookup "kubevirt.io/v1" "VirtualMachine" "" "" "{{hub fromConfigMap "" (printf "%s" (index .ManagedClusterLabels "acm-virt-config")) "backup_label_name" hub}}").items }}
              {{- $vms_daily = (lookup "kubevirt.io/v1" "VirtualMachine" "" "" "{{hub fromConfigMap "" (printf "%s" (index .ManagedClusterLabels "acm-virt-config")) "backup_label_name" hub}}=daily").items }}
              {{- $vms_inst_exists = gt (len ($vms)) 0  }}
            {{- end }}

            {{- $generateSchedule := $vms_inst_exists }}

            {{- /* if there are any vm instances  */ -}}
            {{ if not $generateSchedule }}
                - complianceType: mustnothave
                  objectDefinition:
                    apiVersion: velero.io/v1
                    kind: Schedule
                    metadata:
                      name: {{ $acm_virt_sch_name }}
                      namespace: {{ $ns }}
                {{- /* TODO: delete daily schedule */ -}}
            {{ else }}

              {{- $daily_cron_schedule := "10 1 * * *" }}
              {{- $cron_schedule := "10 */1 * * *" }}
              {{- $ttl_schedule := "24h0m0s" }}
              {{- $acm_schedule_owner := "" }}
              {{- $paused_schedule := false }}

              {{- /* check if this is a hub, acm installed  */ -}}
              {{- $acm_crd_name := "multiclusterhubs.operator.open-cluster-management.io" }}
              {{- $acm_crd := lookup "apiextensions.k8s.io/v1" "CustomResourceDefinition" "" $acm_crd_name  }}
              {{- $is_hub := eq $acm_crd.metadata.name  $acm_crd_name }}

              {{- /* check if OADP CRD is installed  */ -}}
              {{- $dpa_crd_name := "dataprotectionapplications.oadp.openshift.io" }}
              {{- $dpa_crd := lookup "apiextensions.k8s.io/v1" "CustomResourceDefinition" "" "dataprotectionapplications.oadp.openshift.io"  }}
              {{- $dpa_crd_exists := eq $dpa_crd.metadata.name  $dpa_crd_name }}

              {{- /* check if velero is installed  */ -}}
              {{- $sch_crd_name := "schedules.velero.io" }}
              {{- $sch_crd := lookup "apiextensions.k8s.io/v1" "CustomResourceDefinition" "" $sch_crd_name  }}
              {{- $sch_crd_exists := eq $sch_crd.metadata.name  $sch_crd_name }}

              {{ if ($sch_crd_exists) }}
                {{- /* Velero Schedule CRD is installed */ -}}

                {{hub $configMap := (lookup "v1" "ConfigMap" "" (printf "%s" (index .ManagedClusterLabels "acm-virt-config"))) hub}}
                {{- $cron_schedule = "{{hub $configMap.data.scheduleCron hub}}" }}
                {{- $ttl_schedule = "{{hub $configMap.data.scheduleTTL hub}}" }}
                {{- $paused_schedule = "{{hub $configMap.data.schedulePaused hub}}" }}
                {{- $should_run_schedule := false }}
                {{ if not $is_hub }}
                  {{- /* always generate the schedule for managed clusters */ -}}
                  {{- $ns = "{{hub $configMap.data.backupNS hub}}" }}
                  {{- $should_run_schedule = true }}

                {{ else}}
                  {{- /* ACM is installed, this is a hub cluster */ -}}

                  {{- /* This is a hub cluster so generate the VM schedule only if there is a Velero acm schedule running */ -}}

                  {{- /* Schedule CRD is installed, check if there is an ACM schedule running */ -}}
                  {{- $acm_schedule_name := "acm-resources-schedule"}}
                  {{- $acm_sch_res := lookup "velero.io/v1" "Schedule" $ns $acm_schedule_name  }}
                  {{- $acm_sch_res_exists := eq $acm_sch_res.metadata.name  $acm_schedule_name }}
                  {{- /* ACM hub backup not running so don't generate the vm backup; delete it one exists */ -}}
                  {{- $should_run_schedule = or $should_run_schedule $acm_sch_res_exists }}
                {{- end}}

                {{ if not $should_run_schedule }}
                    {{- $generateSchedule = false }}
                - complianceType: mustnothave
                  objectDefinition:
                    apiVersion: velero.io/v1
                    kind: Schedule
                    metadata:
                      name: {{ $acm_virt_sch_name }}
                      namespace: {{ $ns }}
                {{ else }}
                   {{ if $is_hub }}
                    {{- /* get acm schedule settings */ -}}
                    {{- $acm_sch_res := lookup "velero.io/v1" "Schedule" $ns "acm-resources-schedule"  }}
                    {{- $acm_schedule_owner = (index $acm_sch_res.metadata.labels "cluster.open-cluster-management.io/backup-schedule-name") }}
                  {{- /* ACM MCH installed, this is the hub */ -}}
                  {{- end }}

                {{- end }}

              {{- /* Velero Schedule CRD is installed */ -}}
              {{- end }}

              {{ if $generateSchedule }}

                {{- /* create vm backup schedule - DISABLING for now to test daily schedule */ -}}
                {{- /* vms_ns gives the list of all namespaces where VM exist  */ -}}
                {{ $vms_ns := " " }}
                {{- /* vms_ns gives the list of all VM names  */ -}}
                {{ $vms_names := " " }}

                {{- range $vms := (lookup "kubevirt.io/v1" "VirtualMachine" "" "" "{{hub fromConfigMap "" (printf "%s" (index .ManagedClusterLabels "acm-virt-config")) "backup_label_name" hub}}").items }}

                  {{ if not (contains $vms.metadata.name $vms_ns) }}
                    {{- /* add VM namespace if not already in the vms_ns  */ -}}
                    {{- $vms_ns = (cat $vms_ns $vms.metadata.namespace " ") }}
                  {{- end }}
                  {{ if not (contains $vms.metadata.name $vms_names) }}
                    {{- /* add VM name if not already in the vms_names  */ -}}
                    {{- $vms_names = (cat $vms_names $vms.metadata.name " ") }}
                  {{- end }}
                {{- end }}

                {{- /* Disabling the custom schedule temporarily */ -}}
                {{ $tempdisabled := "yes" }}
                {{ if and (eq $tempdisabled "no") (not (eq $vms_ns " ")) (not (eq $vms_names " ")) }}

                - complianceType: mustonlyhave
                  objectDefinition:
                    apiVersion: velero.io/v1
                    kind: Schedule
                    metadata:
                      name: {{ $acm_virt_sch_name }}
                      namespace: {{ $ns }}
                      labels:
                        {{ if not (eq $acm_schedule_owner "") }}
                        cluster.open-cluster-management.io/backup-schedule-name: {{ $acm_schedule_owner }}
                        {{- end }}
                        cluster.open-cluster-management.io/backup-cluster: {{ fromClusterClaim "id.openshift.io" }}
                        cluster.open-cluster-management.io/backup-schedule-type: kubevirt
                    spec:
                      paused: {{ $paused_schedule }}
                      schedule: {{ $cron_schedule }}
                      skipImmediately: false
                      template:
                        ttl: {{ $ttl_schedule }}
                        includeClusterResources: true
                        snapshotMoveData: true
                        defaultVolumesToFsBackup: false
                        includedNamespaces:
                          {{- range $vms_namespace := split " " $vms_ns }}
                          {{ if not (eq $vms_namespace "") }}
                          - {{ $vms_namespace }}
                          {{- end }}
                          {{- end }}
                        orLabelSelectors:
                          - matchExpressions:
                              - values:
                                {{- range $vms_name := split " " $vms_names }}
                                  {{ if not (eq $vms_name "") }}
                                - {{ $vms_name }}
                                  {{- end }}
                                {{- end }}
                                key: app
                                operator: In
                          - matchExpressions:
                              - values:
                                {{- range $vms_name := split " " $vms_names }}
                                  {{ if not (eq $vms_name "") }}
                                - {{ $vms_name }}
                                  {{- end }}
                                {{- end }}
                                key: kubevirt.io/domain
                                operator: In

                {{- /* there are VM resources */ -}}
                {{- end }}

                {{- /* create daily vm backup schedule */ -}}
                {{- /* vms_daily_names gives the list of all VM names to be backed up with daily schedule */ -}}
                {{ $vms_daily_names := " " }}

                {{- range $vm_daily := $vms_daily }}
                  {{ if not (contains $vm_daily.metadata.name $vms_daily_names) }}
                    {{- /* add VM name if not already in the vms_daily_names  */ -}}
                    {{- $vms_daily_names = (cat $vms_daily_names $vm_daily.metadata.name " ") }}
                  {{- end }}
                {{- end }}

                {{ if not (eq $vms_daily_names " ") }}

                - complianceType: mustonlyhave
                  objectDefinition:
                    apiVersion: velero.io/v1
                    kind: Schedule
                    metadata:
                      name: {{ $acm_virt_sch_name_daily }}
                      namespace: {{ $ns }}
                      labels:
                        {{ if not (eq $acm_schedule_owner "") }}
                        cluster.open-cluster-management.io/backup-schedule-name: {{ $acm_schedule_owner }}
                        {{- end }}
                        cluster.open-cluster-management.io/backup-cluster: {{ fromClusterClaim "id.openshift.io" }}
                        cluster.open-cluster-management.io/backup-schedule-type: kubevirt
                    spec:
                      paused: {{ $paused_schedule }}
                      schedule: {{ $daily_cron_schedule }}
                      skipImmediately: false
                      template:
                        ttl: {{ $ttl_schedule }}
                        includeClusterResources: true
                        snapshotMoveData: true
                        defaultVolumesToFsBackup: false
                        orLabelSelectors:
                          - matchExpressions:
                              - values:
                                {{- range $vms_daily_name := split " " $vms_daily_names }}
                                  {{ if not (eq $vms_daily_name "") }}
                                - {{ $vms_daily_name }}
                                  {{- end }}
                                {{- end }}
                                key: app
                                operator: In
                          - matchExpressions:
                              - values:
                                {{- range $vms_daily_name := split " " $vms_daily_names }}
                                  {{ if not (eq $vms_daily_name "") }}
                                - {{ $vms_daily_name }}
                                  {{- end }}
                                {{- end }}
                                key: kubevirt.io/domain
                                operator: In

                {{- /* there are VM resources to backup with the daily schedule */ -}}
                {{- end }}

              {{- /* generateSchedule is true */ -}}
              {{- end}}

            {{- /* VM CRD is installed */ -}}
            {{- end}}
          pruneObjectBehavior: DeleteIfCreated
          remediationAction: enforce
          severity: high
---
apiVersion: cluster.open-cluster-management.io/v1beta1
kind: Placement
metadata:
  name: acm-virt-backup-placement
spec:
  predicates:
    - requiredClusterSelector:
        labelSelector:
          matchExpressions:
            - key: 'acm-virt-config'
              operator: 'Exists'
---
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: acm-virt-backup-placement
placementRef:
  name: acm-virt-backup-placement
  apiGroup: cluster.open-cluster-management.io
  kind: Placement
subjects:
  - name: acm-virt-backup
    apiGroup: policy.open-cluster-management.io
    kind: Policy
---
apiVersion: cluster.open-cluster-management.io/v1beta2
kind: ManagedClusterSetBinding
metadata:
  name: global
spec:
  clusterSet: global
